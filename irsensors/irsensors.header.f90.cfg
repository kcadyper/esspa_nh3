f90Preamble={
    'f90Header':[
    [
    '!<f90File>**************************************************************',
    '!',
    '! CONTACT:',
    '!',
    '!   Atmospheric & Environmental Research, Inc',
    '!   131 Hartwell Ave',
    '!   Lexington ,MA 02421-3126 USA',
    '!   Phone: 781.761.2288',
    '!   E-mail: $(user)@aer.com',
    '!',
    '! COPYRIGHT NOTICE:',
    '!',
    '!   Copyright AER, Inc 2001-$(year), All Rights Reserved',
    '!   See the file README-DATARIGHTS.txt included with this release',
    '!   for additional details.',
    '!',
    '!*************************************************************</f90File>'
    ]
    ],
    'fnc':[
    [
    '',
    '!<f90Function>**********************************************************',
    '!',
    '! NAME:',
    '!',
    '!   $(lcname)',
    '!',
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! SYNTAX:',
    '!',
    '!   $(lcstring)',
    '!',
    '! ARGUMENTS:',
    '!',
    '!   $(lcarguments)',
    '!',
    '!   * OPTIONAL',
    '!',
    '! RETURN:',
    '!',
    '!   $(return)',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!*********************************************************</f90Function>'
    ]
    ],
    'sub':[
    [	
    '',
    '!<f90Subroutine>********************************************************',
    '!',
    '! NAME:',
    '!',
    '!   $(lcname)',
    '!',
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! SYNTAX:',
    '!',
    '!   $(lcstring)',
    '!',
    '! ARGUMENTS:',
    '!',
    '!   $(lcarguments)',
    '!',
    '!   * OPTIONAL',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!*******************************************************</f90Subroutine>'
    ]
    ],
    
    'main':[
    [
    '',
    '! <f90Main>*************************************************************',
    '!',
    '! NAME:',
    '!',
    '!   $(lcname)',
    '!',	 
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!*************************************************************</f90Main>'
    ],
],
    'module':[
    [
    '',
    '! <f90Module>***********************************************************',
    '!',
    '! NAME:',
    '!',
    '!   $(lcname)',
    '!',	 
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!***********************************************************</f90Module>'
    ],
],
    'block':[
    [
    '',
    '!<f90blockData>*********************************************************',
    '!',
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!*********************************************************</f90blockData>'
    ]
    ]}

parmList={
'maxLength':70,
'nPar':'Total number of elements in retrieval vector',
'IG':'Starting indices for sections of geophysical state vector',
'NG':'Number of elements for sections of geophysical state vector',
'nlev':'Number of atmospheric levels',
'pressure':'Pressure on atmospheric levels',
'wvn':'Wavenumbers',
'IEmMwG':'Starting index for MW emissivity in geophysical state vector',
'iclassatm':'Atmospheric class index',
'igeo':'Surface (geography) class index',
'psfc':'Surface pressure',
'retrievalFlags':'Flags telling which parameters to be retrieved',
'nEmMw_in':'Number of retrieved variables for MW emissivity',
'nemIR_in':'Number of hinge points for retrieving IR emissivity',
'pland':'Fraction of land (versus water) of the field of view',
'plandMaxOc':'Upper limit on pland for classifiying as water surface',
'plandMaxOc_in':'Upper limit on pland for classifiying as water surface',
'plandAvg':'pland representing average',
'x':'Retrieval state vector',
'nchanmw':'Number of MW channels',
'nchan':'Number of channels',
'nchanout':'Number of channels for output',
'nchanRad':'Number of channels in rad data source',
'nChanIR':'Number of IR channels',
'nChannels':'Number of channels',
'nChOn':'Number of channels turned on',
'logSize_in':'Flag for type of cloud size parameter retrieval: Logarithmic vs Linear',
'xG':'State vector in geophysical space',
'EmRf':'IR emissivity/reflectivity at hinge points',
'Tsfc':'Surface-level air temperature',
'xkt':'Jacobian matrix transpose ',
'xkEmRf':'Jacobians for IR emissivity/reflectivity',
'AtmNoise':'Atmospheric model error standard deviation',
'drad_in':'Noise adjustment to stabilize convergence, for input',
'kchan':'Channel on/off mask',
'chanID':'Channel identifier string',
'chanIDtmp':'Channel identifier string temporary version',
'chanIDreq':'Channel identifier string for required channels',
'nMembersTotal':'Number of members of all clusters combined',
'nLines':'number of lines',
'nMembers':'Number of members per group',
'obsang':'viewing angle',
'sunang':'solar angle',
'SubproName':'Name of subroutine that called',
'Yin':'Radiometric data for input',
'Y':'Radiometric data computed from state vector',
'xOff':'linear offset coefficients',
'xGain':'linear gain coefficients',
'xGroup':'Retrieval state vector for the group',
'nTskin_in':'Number of eigenvectors for Tskin',
'ntemp_in':'Number of elements for temperature',
'ngas_in':'Number of elements for molecular concentrations',
'nCldLiq_in':'Number of elements for liquid cloud',
'nCldIce_in':'Number of elements for ice cloud',
'time':'Date/time',
'xlat':'Latitude',
'xlon':'Longitude',
'iStrat':'Stratification level flag',
'alpha1slope_in':'Slope of factor to model linearization error, for input',
'alpha1int_in':'Intercept of factor to model linearization error, for input',
'nxiterMw_in':'maximum number of iterations in MW',
'nxiter_in':'maximum number of iterations',
'chisqconvMw_in':'value of chi-squared needed for convergence in MW',
'chisqconv_in':'value of chi-squared needed for convergence',
'chisqRatioconv_in':'value of chisq fractional change needed for convergence',
'cldamt1stguess_in':'First guess cloud liquid water path',
'iceamt1stguess_in':'First guess cloud ice water path',
'TightCLDcov_in':'Cloud water variance to use when holding cloud water near zero',
'file_algcfg':'File path for algorithm configuration parameters',
'file_aux':'File path for auxiliary data',
'radTmp':'Input set of radiances ',
'wvnRad':'Center wavenumbers of channels from rad file',
'radWaveNumbers':'Center wavenumbers of channels from rad file',
'wvnOSS':'Center wavenumbers of all channels provided by OSS',
'linWaveNumbers':'Center wavenumbers of channels from linear coefficients file',
'waveThresh':'Threshold channel wavenumber difference to accept as a match',
'waveThreshold':'Threshold channel wavenumber difference to accept as a match',
'radChannels':'Number of channels from rad file',
'modchan':'Flag to reduce the total set of OSS channels',
'radAll':'Radiances for all locations and channels',
'fileLinInv':'Path of file of linear inversion coefficients',
'file_ext':'Path of file of external background data',
'file_emis':'Path of file of external emissivity data',
'cloudType':'ID of cloud type class',
'delCldLiqTop_in':'Finite diff step for liquid cloud top in fraction of pres grid spacing',
'delCldLiqThk_in':'Finite diff step for liquid cloud thickness in fraction of pres grid spacing',
'delCldLiqAmt_in':'Finite diff step for liquid cloud thickness (kg/m2)',
'delCldLiqDeff_in':'Finite diff step for liquid cloud effective diameter, fractional',
'delCldIceTop_in':'Finite diff step for ice cloud top in fraction of pres grid spacing',
'delCldIceThk_in':'Finite diff step for ice cloud thickness in fraction of pres grid spacing',
'delCldIceAmt_in':'Finite diff step for ice cloud thickness (kg/m2)',
'delCldIceDeff_in':'Finite diff step for ice cloud effective diameter, fractional',
'delTskin_in':'Finite diff step for surface skin temperature (K)',
'yref':'Reference radiances',
'nRec':'Number of records',
'nElements':'Number of elements',
'lats':'Array of latitudes',
'lons':'Array of longitudes',
'satZens':'Array of satellite zenith angles',
'geography':'Geography IDs',
'memberList':'List of cluster members',
'cldyMemberList':'Pointer (0-based) to cloudy-pixel file location of each pixel in cluster',
'startIndices':'Index into member lists for first member of each cluster (0-based)',
'startIndex':'Starting index for cluster members',
'numMembers':'Numbers of members per group',
'latGrid':'Grid of latitudes',
'lonGrid':'Grid of longitudes',
'satZenGrid':'Grid of satellite-zenith angles',
'geogGrid':'Grid of geography IDs',
'subscriptMap':'Index map to rad file channel for each linear coeffient file channel',
'cldRadiance':'Radiance data at cloudy pixels',
'chiSqFinal':'Final chi-squared metric',
'chiSqThresh':'Threshold value of chi-squared needed for convergence',
'qcFactor':'Multiplier of chi-squared threshold to accept as passing QC',
'IGR':'Starting indices for retrieved sections of geophysical state vector',
'NGR':'Number of elements for retrieved sections of geophysical state vector',
'clusRadGroup':'Radiances for the group',
'clusterRadGroup':'Radiances for the group',
'clusteridGrid':'Grid of cluster indices',
'clusterID':'cluster index',
'xGroupGrid':'Grid of retrieved parameters',
'procName':'Name of variable, subject of warning message',
'fileID':'Index of file',
'radianceData':'Radiance data',
'nGroup':'TBD',
'radFileName':'File path for radiance file',
'clusFileName':'File path for cluster data file',
'tempFileName':'File path for debug file',
'linCoefFileName':'File path for linear coefficients data',
'originalFileName':'File path for radiance file in original gridded form',
'stage2OutFile':'File path for output of linear retrieval',
'DevNoise':'Instrument noise standard deviation',
'sumIRDevNoise':'Total instrument noise for channels turned on',
'F_nedn':'File path for channel noise data',
'Ym0':'Radiance',
'scanAng':'scan Angle',
'iclassatmRegr':'Atmospheric class index for regression',
'ncid':'ID for ncdf file ',
'fileName':'File name',
'fname':'File name',
'byteArray':'Generic byte array',
'varName':'Name of variable',
'theOffset':'Offset attribute',
'theScale':'Scale factor attribute',
'theUnit':'Unit attribute',
'theMin':'Miniumum value attribute',
'theMax':'Maximum value attribute',
'theMissing':'Missing value attribute',
'attName':'attribute name',
'attrName':'attribute name',
'attrib':'value of an attribue',
'intArray':'Generic integer array',
'lines':'number of lines',
'samples':'number of samples',
'nang':'number of angles',
'eiaAll':'Satellite Earth incidence (zenith) angles',
'latAll':'Latitudes',
'lonAll':'Longitudes',
'cldTypAll':'IDs of cloud type class',
'ncStatus':'Error status',
'msg':'Text of message',
'iexit':'Inicator of state of surface classification',
'NEmMwG':'Number of Mw emissivities',
'latUnit':'units for latitude',
'lonUnit':'units for longitude',
'satZenUnit':'units for satellite zenith angle',
'geogUnit':'units for geography ID',
'variableName':'variable name',
'attNames':'attribute names',
'attribs':'attributes'
}
fncDesc={
#generic/src/
'retr':'Main retrieval program.',
'setPropertiesAlgConfig':'Set global variables from argument list, for retrieval tuning parameters.',
'loadAlgconfig':'Load retrieval tuning parameters.',
'loadAux':'Load auxiliary data from file.',
'adjustChanSet':'Make adjustments, if OSS channel set does not match the radiance file channel set.',
'writeLinInvert':'Write data for linear inversion to a file',
'loadExt':'Load external background data from file',
'loadEmis':'Load external emissivity data for use in background',
'cloudModeTest':'Set controls to disable retrieval of cloud parameters, depending on dynamic cloud mask',
'setPropertiesFiniteDiff':'Set global variables from input arguments, for tunable controls on finite difference calculations',
'loadFiniteDiff':'Load tunable controls on finite difference calculations',
'finiteDiff':'Numerical computation of Jacobians.',
'initFiniteDiff':'Initialize state vector, radiances, and Jacobians to zero for finite difference calculations',
'destroyFiniteDiff':'Deallocate arrays related to finite differencing.',
'LinRetrGroup':'Main program for the linear second stage in two-stage retrieval',
'mapLatLon':'Transfer geographic information from cluster indexed storage to line/element grid storage.',
'createSubscriptMap':'Create an index list to map from radiance data file channels to channels used with the linear coefficients.',
'drvRetr':'Driver for linear retrieval, by group. Do the bounds testing.',
'saveParameters':'Transfer retrieved results from cluster indexed storage to line/element grid storage.',
'packClusterRadData':'Pack rad data from all ON channels for all members of cluster into clusterRadGroup.',
'computeQCvalue':'Compute QC',
'writeToFile':'For Intermediate data verification only',
'readConfigParameters':'Reads the control parameters to execute the program.',
'GetEmisData':'Program to access emissivity from a database',
'InterpNWPprof':'Program to interpolate NWP vertical profiles at cluster centers.',
#modis/src/sim/
'IRChannels':'Manipulate settings for channels.',
'initIRChannels':'Turn on/off channels.',
'IRNoiseModule':'Computations related to noise in IR channels.',
'IRaddDeviceNoise':'Add Gaussian random noise to radiances.',
'IRdeviceNoise':'Determine noise standard deviation for each channel.',
'loadIRdeviceNoise':'Load noise data into global arrays.',
#modis/src/retr/core/
'RadFile':'Contains routines for loading radfile dimensions, attributes and variables, thereby compartmentalizing the data input. ',
'getDimRad':'Read in and return the rad file dimensions.',
'getRadData':'Read in rad file variables and attributes and load into arrays.',
'getCloudData':'Load cloud-related variables.',
'getGeogData':'Read geographysical data stored as short',
'handle_nc_err':'Report error condition.',
'SurfaceTypingModule':'For surface classification',
'setSfc':'Set surface classification based on inputs.',
'classatm':'Set atmosphere class.',
'classatmRegr':'Set atmosphere class, when using regression.',
'OriginalFile':'Get various information from the original ncdf file.',
'getByteDataScaleAndOffset':'Read byte-type data array and return it. Optionally return the data attributes.',
'getRealVariableAttribute':'Get a real-type attribute of the variable specified in varName.',
'getCharacterVariableAttribute':'Get a string-type attribute of the variable specified in varName.',
'getIntegerDataScaleAndOffset':'Read integer-type data array and return it. Optionally return the data attributes.',
'getDimensions':'Return the lines and samples dimensions of the data arrays in original data file specified in fname.',
'CoefFile':'Manipulate the linear coefficient file.',
'getCoefDimensions':'Read dimensions and attributes that serve as actual dimensions for the various data in linear coefficients file.',
'getLinearCoefftsData':'Load various linear coefficients data from the coefficients file and build the IGR and NGR structures',
'WriteFile':'Provide services to write the results of linear retrieval to a specified netCDF file.',
'writeFloatResults':'Write data as unscaled float variables',
'writeIntResults':'Write data as scaled integer variables',
'addMoreAttributes':'Adds additional float attributes to an already defined netCDF variable.',
'writeXGroupResults':'Writes the linearly retrieved parameters to a file, translating from state vector index storage to individual variable names.',
'writeWarning':'Write a warning message.',
}

rmHdr='!.*<.*f90.*>.*'
