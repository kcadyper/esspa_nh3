f90Preamble={
    'f90Header':[
    [
    '!<f90File>**************************************************************',
    '!',
    '! CONTACT:',
    '!',
    '!   Atmospheric & Environmental Research, Inc',
    '!   131 Hartwell Ave',
    '!   Lexington ,MA 02421-3126 USA',
    '!   Phone: 781.761.2288',
    '!   E-mail: $(user)@aer.com',
    '!',
    '! COPYRIGHT NOTICE:',
    '!',
    '!   Copyright AER, Inc 2001-$(year), All Rights Reserved',
    '!   See the file README-DATARIGHTS.txt included with this release',
    '!   for additional details.',
    '!',
    '!*************************************************************</f90File>'
    ]
    ],
    'fnc':[
    [
    '',
    '!<f90Function>**********************************************************',
    '!',
    '! NAME:',
    '!',
    '!   $(lcname)',
    '!',
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! SYNTAX:',
    '!',
    '!   $(lcstring)',
    '!',
    '! ARGUMENTS:',
    '!',
    '!   $(lcarguments)',
    '!',
    '!   * OPTIONAL',
    '!',
    '! RETURN:',
    '!',
    '!   $(return)',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!*********************************************************</f90Function>'
    ]
    ],
    'sub':[
    [	
    '',
    '!<f90Subroutine>********************************************************',
    '!',
    '! NAME:',
    '!',
    '!   $(lcname)',
    '!',
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! SYNTAX:',
    '!',
    '!   $(lcstring)',
    '!',
    '! ARGUMENTS:',
    '!',
    '!   $(lcarguments)',
    '!',
    '!   * OPTIONAL',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!*******************************************************</f90Subroutine>'
    ]
    ],
    
    'main':[
    [
    '',
    '! <f90Main>*************************************************************',
    '!',
    '! NAME:',
    '!',
    '!   $(lcname)',
    '!',	 
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!*************************************************************</f90Main>'
    ],
],
    'module':[
    [
    '',
    '! <f90Module>***********************************************************',
    '!',
    '! NAME:',
    '!',
    '!   $(lcname)',
    '!',	 
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!***********************************************************</f90Module>'
    ],
],
    'block':[
    [
    '',
    '!<f90blockData>*********************************************************',
    '!',
    '! PURPOSE:',
    '!',
    '!   $(description)',
    '!',
    '! INCLUDES:',
    '!',
    '!   $(includes)',
    '!',
    '!*********************************************************</f90blockData>'
    ]
    ]}

parmList={
'maxLength':80,
'nparGout':'Total number of elements in geophysical state vector for output',
'nparG':'Total number of elements in geophysical state vector',
'nParG_in':'Total number of elements in geophysical state vector',
'nParGaux':'Total number of elements in geophysical state vector for aux file',
'NparMwG':'Total number of elements in geophysical state vector',
'nparGsrc':'Total number of elements in geophysical state vector of source data',
'nParGon':'Total number of retrieved elements in geophysical state vector',
'nPar':'Total number of elements in retrieval vector',
'nPar_out':'Total number of elements in retrieval vector',
'NparMw':'Total number of elements in retrieval vector',
'npargregr':'Total number of elements in retrieval vector',
'IGout':'Starting indices for sections of geophysical state vector for output',
'Igext':'Starting indices for sections of geophysical state vector for external data',
'IG':'Starting indices for sections of geophysical state vector',
'Igaux':'Starting indices for sections of geophysical state vector for aux file',
'IGsrc':'Starting indices for sections of geophysical state vector of source data',
'IGRout':'Starting indices for retrieved sections of geophysical state vector',
'IGRin':'Starting indices for retrieved sections of geophysical state vector',
'IGgrid':'Starting indices for sections of geophysical state vector on grid',
'IGfov':'Starting indices for sections of geophysical state vector at FOV',
'IGF':'Starting indices for sections of geophysical state vector in file',
'NGout':'Number of elements for sections of geophysical state vector for output',
'Ngext':'Number of elements for sections of geophysical state vector for external data',
'NG':'Number of elements for sections of geophysical state vector',
'Ngaux':'Number of elements for sections of geophysical state vector for aux file',
'NGsrc':'Number of elements for sections of geophysical state vector of source data',
'NGRout':'Number of elements for retrieved sections of geophysical state vector',
'NGRin':'Number of elements for retrieved sections of geophysical state vector',
'NGgrid':'Number of elements for sections of geophysical state vector on grid',
'NGfov':'Number of elements for sections of geophysical state vector at FOV',
'NV':'Number of elements for sections of state vector',
'Nin':'Number of elements for sections of state vector at input',
'NGF':'Number of elements for sections of state vector in file',
'nlevel':'Number of atmospheric levels',
'nlev':'Number of atmospheric levels',
'nlev_out':'Number of atmospheric levels',
'pressure':'Pressure on atmospheric levels',
'pref':'Pressure on atmospheric grid levels',
'pref_out':'Pressure on atmospheric grid levels',
'pres':'Pressure',
'press':'Pressure on atmospheric levels',
'freq':'Frequency',
'frq':'Channel frequencies',
'wvn':'Wavenumbers',
'wvnExt':'Wavenumbers at external IR emis hinge points',
'wvnout':'Wavenumbers on output grid',
'polarity':'Polarization of MW channels',
'nemIRG':'Number of IR emissivity hinge points',
'nemirExt':'Number of IR emissivity hinge points for external data',
'frqEmIR':'Wavenumbers at IR emissivity hinge points',
'iemmwGout':'Starting index for MW emissivity in geophysical state vector for output',
'IEmMwG':'Starting index for MW emissivity in geophysical state vector',
'iEmIRGout':'Starting index for IR emissivity hinge points for output',
'IEmIRG':'Starting index for IR emissivity hinge points',
'molID':'List of IDs of relevant molecular species',
'molIDout':'List of IDs of relevant molecular species for output',
'molIDext':'List of IDs of relevant molecular species for external data',
'molid_in':'List of IDs of relevant molecular species',
'molIDaux':'List of IDs of relevant molecular species for aux file',
'molIDsrc':'List of IDs of relevant molecular species of source data',
'molIDfov':'List of IDs of relevant molecular species at FOV',
'backcldtopoc_in':'Background override for liquid cloud top - ocean',
'backcldtopoc':'Background override for liquid cloud top - ocean',
'backcldtopld_in':'Background override for liquid cloud top - land',
'backcldtopld':'Background override for liquid cloud top - land',
'backcldthkoc_in':'Background override for liquid cloud thickness - ocean',
'backcldthkoc':'Background override for liquid cloud thickness - ocean',
'backcldthkld_in':'Background override for liquid cloud thickness - land',
'backcldthkld':'Background override for liquid cloud thickness - land',
'backcldamtoc_in':'Background override for liquid cloud water - ocean',
'backcldamtoc':'Background override for liquid cloud water - ocean',
'backcldamtld_in':'Background override for liquid cloud water - land',
'backcldamtld':'Background override for liquid cloud water - land',
'backclddeffoc_in':'Background override for liquid cloud effective diameter - ocean',
'backclddeffoc':'Background override for liquid cloud effective diameter - ocean',
'backclddeffld_in':'Background override for liquid cloud effective diameter - land',
'backclddeffld':'Background override for liquid cloud effective diameter - land',
'varcldtopoc_in':'Error variance override for liquid cloud top - ocean',
'varcldtopoc':'Error variance override for liquid cloud top - ocean',
'varcldtopld_in':'Error variance override for liquid cloud top - land',
'varcldtopld':'Error variance override for liquid cloud top - land',
'varcldthkoc_in':'Error variance override for liquid cloud thickness - ocean',
'varcldthkoc':'Error variance override for liquid cloud thickness - ocean',
'varcldthkld_in':'Error variance override for liquid cloud thickness - land',
'varcldthkld':'Error variance override for liquid cloud thickness - land',
'varcldamtoc_in':'Error variance override for liquid cloud water - ocean',
'varcldamtoc':'Error variance override for liquid cloud water - ocean',
'varcldamtld_in':'Error variance override for liquid cloud water - land',
'varcldamtld':'Error variance override for liquid cloud water - land',
'varclddeffoc_in':'Error variance override for liquid cloud effective diameter - ocean',
'varclddeffoc':'Error variance override for liquid cloud effective diameter - ocean',
'varclddeffld_in':'Error variance override for liquid cloud effective diameter - land',
'varclddeffld':'Error variance override for liquid cloud effective diameter - land',
'backicetopoc_in':'Background override for ice cloud top - ocean',
'backicetopoc':'Background override for ice cloud top - ocean',
'backicetopld_in':'Background override for ice cloud top - land',
'backicetopld':'Background override for ice cloud top - land',
'backicethkoc_in':'Background override for ice cloud thickness - ocean',
'backicethkoc':'Background override for ice cloud thickness - ocean',
'backicethkld_in':'Background override for ice cloud thickness - land',
'backicethkld':'Background override for ice cloud thickness - land',
'backiceamtoc_in':'Background override for ice cloud water - ocean',
'backiceamtoc':'Background override for ice cloud water - ocean',
'backiceamtld_in':'Background override for ice cloud water - land',
'backiceamtld':'Background override for ice cloud water - land',
'backicedeffoc_in':'Background override for ice cloud effective diameter - ocean',
'backicedeffoc':'Background override for ice cloud effective diameter - ocean',
'backicedeffld_in':'Background override for ice cloud effective diameter - land',
'backicedeffld':'Background override for ice cloud effective diameter - land',
'varicetopoc_in':'Error variance override for ice cloud top - ocean',
'varicetopoc':'Error variance override for ice cloud top - ocean',
'varicetopld_in':'Error variance override for ice cloud top - land',
'varicetopld':'Error variance override for ice cloud top - land',
'varicethkoc_in':'Error variance override for ice cloud thickness - ocean',
'varicethkoc':'Error variance override for ice cloud thickness - ocean',
'varicethkld_in':'Error variance override for ice cloud thickness - land',
'varicethkld':'Error variance override for ice cloud thickness - land',
'variceamtoc_in':'Error variance override for ice cloud water - ocean',
'variceamtoc':'Error variance override for ice cloud water - ocean',
'variceamtld_in':'Error variance override for ice cloud water - land',
'variceamtld':'Error variance override for ice cloud water - land',
'varicedeffoc_in':'Error variance override for ice cloud effective diameter - ocean',
'varicedeffoc':'Error variance override for ice cloud effective diameter - ocean',
'varicedeffld_in':'Error variance override for ice cloud effective diameter - land',
'varicedeffld':'Error variance override for ice cloud effective diameter - land',
'varTskinOc_in':'Error variance override for Tskin - ocean',
'varTskinOc':'Error variance override for Tskin - ocean',
'varTskinLd_in':'Error variance override for Tskin - land',
'varTskinLd':'Error variance override for Tskin - land',
'file_algcfg':'Tuning data file',
'unit_algcfg':'file unit number for tuning data',
'file_covar1':'Input background/covariance file name',
'file_covar2':'Input background/covariance file name',
'iclassatm':'Atmospheric class index',
'igeo':'Surface (geography) class index',
'psfc':'Surface pressure',
'ifor':'Index of field of regard (profile)',
'umtx':'Transformation matrix between geophysical and retrieval spaces',
'retrievalFlags':'Flags telling which parameters to be retrieved',
'NR_in':'Number of retrieved elements for sections of retrieval state vector, for input',
'NR_out':'Number of retrieved elements for sections of retrieval state vector, for output',
'NR':'Number of retrieved elements for sections of retrieval state vector',
'NR_orig':'Number of retrievable elements for sections of retrieval state vector',
'nEmMw_in':'Number of retrieved variables for MW emissivity',
'nemIR_in':'Number of hinge points for retrieving IR emissivity',
'IR_out':'Starting indexes for the groups in retrieval vector',
'IR':'Starting indices for sections of retrieval state vector',
'xbakg_ext':'External background state vector',
'xBakG':'Background state vector in geophysical space',
'xbakg_emis':'External background IR emissivity/reflectivity vector',
'pland':'Fraction of land (versus water) of the field of view',
'plandMaxOc':'Upper limit on pland for classifiying as water surface',
'plandAvg':'pland representing average',
'dback0':'background state vector for the current profile',
'ut_cov_net':'background error covariance for the current profile',
'ut_cov':'background error covariance for the current profile, in retrieval space',
'xFlgPsfc':'Flag for using external surface pressure ',
'extFlgPsfcOut':'Flag for using external surface pressure ',
'xFlgTemp':'Flag for using external atmospheric temperature ',
'extFlgTempOut':'Flag for using external atmospheric temperature ',
'xFlgMols':'Flag for using external set of molecular concentrations',
'extFlgMolOut':'Flag for using external set of molecular concentrations',
'xFlgCldLiq':'Flag for using external data on liquid clouds ',
'extFlgCldLiqOut':'Flag for using external data on liquid clouds ',
'xFlgCldIce':'Flag for using external data on ice clouds ',
'extFlgCldIceOut':'Flag for using external data on ice clouds ',
'xFlgWind':'Flag for using external wind data ',
'extFlgWindOut':'Flag for using external wind data ',
'nmol':'Number of molecular species',
'nmol_in':'Number of molecular species',
'x':'Retrieval state vector',
'nchmw':'Number of MW channels',
'nchanmw':'Number of MW channels',
'nchan':'Number of channels',
'nchanout':'Number of channels for output',
'nchan_out':'Number of channels',
'nchanin':'Number of channels for input',
'nch':'Number of channels turned on',
'nChannels':'Number of channels',
'ih2o':'Index for water vapor in molecules part of state vector',
'logSize':'Flag for type of cloud size parameter retrieval: Logarithmic vs Linear',
'xG':'State vector in geophysical space',
'xregr':'State vector for regression',
'EmMw':'MW emissivity',
'EmRf':'IR emissivity/reflectivity at hinge points',
'xSfc':'Surface-level air temperature',
'Tsfc':'Surface-level air temperature',
'Ym':'Radiometric measurements',
'Y':'Radiometric data computed from state vector',
'xktG':'Jacobian matrix transpose in geophysical space',
'xkt':'Jacobian matrix transpose ',
'XktTmp':'Jacobian matrix transpose in geophysical space',
'xkEmMw':'Jacobians for MW emissivity',
'xkEmRf':'Jacobians for IR emissivity/reflectivity',
'rerr':'Instrument noise standard deviation',
'AtmNoise':'Atmospheric model error standard deviation',
'dradChan':'Noise adjustment to stabilize convergence',
'iter':'Iteration number',
'Itermw':'Iteration number',
'kchan':'Channel on/off mask',
'Airs_Err':'Net error standard deviation, special case',
'Sy':'Measurement error variance ',
'delY':'Radiometric measurements minus computed',
'nClust':'Number of clusters',
'nMembersTotal':'Number of members of all clusters combined',
'nLines':'number of lines',
'nMembers':'Number of members per group',
'cloudyMembers':'Pointer (0-based) to cloudy-pixel file location of each pixel in cluster',
'sel_file':'OSS coefficients file path',
'selfile':'OSS coefficients file path',
'od_file':'OSS optical properties LUT file path',
'odfile':'OSS optical properties LUT file path',
'sol_file':'solar data file path',
'ctab_file':'Cloud optical properties LUT file path',
'enableScatter':'Flag for including multiple scattering in calculations',
'dataType_cld':'List of hydrometeor types',
'dataType':'List of hydrometeor types',
'cldTyp':'Type of cloud model used',
'nHyd':'Number of hydrometeor types',
'ius':'file unit number for OSS coefficients',
'iuo':'file unit number for OSS optical properties LUT',
'iuSol':'file unit number for solar data',
'iu':'file unit number for predictors',
'pfile':'predictor data file path',
'ItempG_in':'Starting index for atmospheric temperature in state vector',
'ITskinG_in':'Starting index for skin temperature in state vector',
'IpsfcG_in':'Starting index for surface pressure in state vector',
'nsf_in':'Number of hinge points for interpolating IR emissivity',
'IcldLiq_in':'Starting index for liquid cloud in state vector',
'IcldLiq':'Starting index for liquid cloud in state vector',
'IcldIce_in':'Starting index for ice cloud in state vector',
'IcldIce':'Starting index for ice cloud in state vector',
'Imolind_in':'Starting index for molecular concentrations in state vector',
'SfGrd_in':'Spectral locations for emissivity hinge points',
'cwvn_out':'Center wavenumbers for instrument channels',
'kfix0':'Effective absorption coefficients of fixed gases in layers/temperatures ',
'kvar0':'Absorption coefficients for variable gases in layers/temperatures',
'NmolS':'Number of molecular species given by LUT at spectral point',
'ImolS':'Indices of molecular species given by LUT at spectral point',
'w':'Layer integrated molecular amounts',
'q':'Layer-average molecular mixing ratios',
'odfac':'Optical depth threshold',
'iflag':'Flag identifying weakly absorbing molecules',
'ks':'Counter of molec species in LUT at spectral point',
'imol':'molecular ID, relating to counter ks',
'kvar1':'Absorption coefficients for reduced set of variable gases',
'nmols0':'Number of molecular species given by LUT',
'nmols1':'Number of a reduced set of molecular species',
'imols0':'Indices of molecular species given by LUT',
'imols1':'Indices of reduced set of molecular species',
'imols_indx':'Mapping of molecular species to reduced set',
'obsang':'viewing angle',
'sunang':'solar angle',
'datin':'Array of quantities of interest at hinge points',
'nxdim':'Array dimension',
'nn':'Index of current spectral point',
'datout':'interpolated quantity',
'ip0':'Starting index for hinge points',
'coefInt':'interpolation coefficients',
'lookup':'Flag for up-looking instruments',
'Nobs':'Index of atmospheric level of the observer',
'Nsurf':'Index of first atmospheric level at or below surface',
'N1':'Atmospheric level related to top or surface, Lookup-dependent',
'N2':'Atmospheric level related to top or surface, Lookup-dependent',
'sun':'Flag for including solar contribution',
'umu':'Cosine of viewing path angle',
'umu0':'Cosine of solar path angle',
'delphi':'Azimuthal angle offset',
'nlast':'Index of last level',
'tavl':'Averaged temperature within a layer',
'wfix':'Layer integrated dry air amount',
'dtu':'Array of temperature derivatives layer-to-upper-level ',
'dtl':'Array of temperature derivatives layer-to-lower-level',
'dwqu':'Array of molecular amounts derivatives layer-to-upper-level',
'dwql':'Array of molecular amounts derivatives layer-to-lower-level',
'pu':'Upper level pressure',
'pl':'Lower level pressure',
'xu':'Quantity to be integrated on upper level',
'xl':'Quantity to be integrated on lower level',
'scal':'Scale factor',
'xint':'Integrated quantity',
'dxu':'Layer-to-upper-level derivative',
'dxl':'Layer-to-lower-level derivative',
'xInp':'Input data',
'pGrid':'Pressure grid',
'N0':'Level index pointing to interpolation range',
'p0':'Pressure at which interpolation to be done',
'x0':'interpolated value',
'plvl':'Pressure at which interpolation to be done',
'xlvl':'interpolated value',
'ilvl':'index of layer used in interpolation',
'dxlvldp':'derivative of xlvl wrt plvl',
'dxlvldxu':'derivative of xlvl wrt upper level x',
'dxlvldxl':'derivative of xlvl wrt upper level x',
'kfix':'Absorption coefficients of fixed gases',
'kh2o':'Absorption coefficients of water vapor',
'dkh2o':'Derivatives of absorption coefficients of water vapor',
'kvar':'Absorption coefficients of variable gases',
'indx':'Index',
'mindx':'Level index',
'a1':'Interpolating coefficient',
'a2':'Interpolating coefficient',
'ad1':'second order interpolating coeff',
'ad2':'second order interpolating coeff',
'tautot':'Optical depth in layers: trace gases contribution',
'abso':'Optical depth-to-molecular amount derivatives',
'dtaudtmp':'Optical depth-to-temperature derivatives',
'bs_sun':'Planck radiance: Solar contribution at surface',
'vn':'Wavenumber, units of cm^-1',
'rad':'Radiance',
'RadOut':'Radiance for output',
'nlay':'Number of atmospheric layers',
'R':'Reflection matrix at NBOT0/NBOT',
't':'Temperature',
'temp':'Temperature',
'ts':'Surface skin temperature',
'radpl':'Planck radiance',
'db':'Radiance-to-temperature derivatives',
'bs':'Surface Planck radiance',
'dbs':'Radiance-to-temperature derivative on surface',
'draddt':'Radiance-to-temperature derivative',
'tabs':'In-layer cloud contribution to absorption optical depth',
'tauabs':'Array of cloud contribution to absorption optical depths',
'tabsHydr':'In-layer hydrometeor contribution to absorption optical depth',
'tscat':'In-layer cloud contribution to scattering optical depth',
'tscatt':'In-layer cloud contribution to scattering optical depth',
'tauscat':'Array of cloud contribution to scattering optical depths',
'asym':'Asymmetry parameter',
'gasym':'Asymmetry parameter',
'od':'Optical depth',
'hlf':'Parameter used in linear-in-tau computations',
'dhlf':'HLF-to-OD derivative',
'Lsol':'file unit number',
'solFile':'solar file path',
'nptout':'Number of output grid',
'sunout':'Interpolated solar contribution on output grid',
'btemp':'Surface skin temperature',
'Emis':'Emissivity',
'solRefl':'Surface reflectivity for solar radiation',
'albedo':'Albedo',
'SALB':'Albedo',
'SSALB':'Albedo',
'FBEAM':'Solar beam',
'lobs':'Observer level',
'sBeam':'Flag for solar calculations',
'sBeamIn':'Flag for solar calculations',
'nStr':'Number of streams',
'iflux':'TBD',
'flxNetMono':'TBD',
'xkEm':'Jacobians for emissivity',
'xkRefl':'Jacobians for reflectivity',
'alpha':'Phase function',
'ltypin':'Flag for pointing to cloud active layers',
'LTYP':'Identifier for clear/cloudy layers',
'lamber':'Flag for Lambertian surface',
'Hl':'TBD',
'deltam':'Flag for Delta-M scaling',
'plankin':'Flag for applying Planck function',
'PLANK':'Flag for applying Planck function',
'ISRFL':'Integer for setting reflectance flags',
'NAZ':'Number of azimuthal directions in scattering calculations',
'NBOT0':'Lowest atmospheric layer, at which RT calculation starts',
'NBOT':'Same as NBOT0 for non-zero azimuthal angle',
'NTOP0':'Highest atmospheric layer, at which RT calculation starts',
'NTOP':'Same as NTOP0 for non-zero azimuthal angle',
'MAZ':'Index for azimuthal direction in scattering calculations',
'F0':'solar irradiance at top of scattering layer',
'reflm':'Reflection matrix at NBOT0/NBOT',
'trnsm':'Transmission matrix at NBOT0/NBOT',
'EM':'Emission vector at NBOT0/NBOT',
'REFLS':'Flag for calculating surface reflectance',
'REFLG':'Flag for calculating surface reflectance',
'TAU':'Optical depth',
'TEXT':'Total extinction',
'TA':'Lower level temperature',
'TUP':'Upper level temperature',
'RLAY':'Layer refrection',
'TLAY':'Layer transmission',
'EMPL':'Forward emission',
'EMML':'Backward emission',
'MRGUP':'Flag for down/upward calculations',
'SBM':'upward and downward emission due to solar scattering',
'DELTAU':'TBD',
'PFP':'Phase matrix',
'PFM':'Phase matrix',
'PFP0':'Phase matrix for solar source',
'PFM0':'Phase matrix for solar source',
'NIT':'number of doubling calculations',
'ATT':'TBD',
'TM':'TBD',
'TMR':'TBD',
'WKEM':'TBD',
'PLNCK':'Flag for applying Planck function',
'REFLF':'Flag to show whether in front of observer atmosphere reflecting',
'REFLB':'Flag to show whether behind observer atmosphere reflecting',
'RF':'Atmosphere Reflection in front of observer',
'RA':'Atmosphere Reflection in front of observer',
'EMF':'Atmosphere Emission in front of observer',
'RB':'Atmosphere Reflection behind observer',
'EMB':'Atmosphere Emission behind observer',
'RM':'TBD',
'Q1':'TBD',
'Q2':'TBD',
'N':'Dimension of array',
'a':'Generic array',
'b':'Generic array',
'c':'Generic array',
's':'Generic scalar',
'ISIZ':'Dimension of array',
'NAR':'Number of rows of matrix A',
'NAC':'Number of columns of matrix A',
'NBC':'Number of columns of matrices B and C',
'D':'Matrix determinant',
'L':'Workspace vector',
'M':'Workspace vector',
'NMU':'Number of arguments of YLM',
'oYLM':'Order of YLM',
'MAXMU':'First dimension of YLM',
'TWONM1':'Max Degree of YLM',
'MU':'YLM arguments',
'YLM':'associated Legendre polynomials',
'tran':'transmittance',
'Tem':'level temperature',
'LS':'index of the surface level',
'oQuad':'order of quadrature rule',
'GMU':'array of abscissae',
'GWT':'array of weights',
'MESSAG':'text of message',
'FATAL':'Flag for fatal error',
'I':'Integer flag for setting machine constant',
'spectPtsGrd':'Spectral grid',
'nNames':'Number of hydrometeor and optical property types',
'dataName':'String combining hydrometeor and optical property ID',
'dataName_in':'String combining hydrometeor and optical property ID',
'Hydr':'Hydrometeor concentration data',
'SizP':'Particle size parameter - primary',
'nindx':'Index',
'outBndsExit_in':'Flag to exit if value is out of bounds',
'nSpcPts':'Number of spectral grid points',
'SubproName':'Name of subroutine that called',
'Name':'Generic name',
'Nelem':'Number of elements',
'Type':'Type identifier',
'Unig':'Integer flag for uniform grid',
'Grid':'Grid nodes',
'SizS':'Particle size parameter - secondary',
'Prop':'Generic property',
'dPropdSzP':'Derivative of the property wrt primary size parameter',
'DpropdSzS':'Derivative of the property wrt secondary size parameter',
'DpropdTemp':'Derivative of the property wrt temperature',
'Step':'Uniform grid spacing',
'Val':'Data value',
'I1':'Grid index',
'I2':'Grid index',
'Xin':'Interpolation point',
'Arr':'Array to be processed',
'arrIntrp':'Interpolated array',
'ArrDer':'Array derivatives within interpolation range',
'iStatus':'Termination status code',
'Sx':'Background error covariance',
'Yin':'Radiometric data for input',
'xGes':'Retrieval state vector guess (current estimate)',
'xOffG':'linear offset coefficients in geophysical space',
'xOff':'linear offset coefficients',
'xGainG':'linear gain coefficients in geophysical space',
'xGain':'linear gain coefficients',
'QC':'quality control index',
'radGroup':'Radiometric data for the group',
'xGroup':'Retrieval state vector for the group',
'Npsfc':'Number of elements for surface pressure',
'nTskin':'Number of elements for Tskin',
'NTemp':'Number of elements for temperature',
'Ngas':'Number of elements for molecular concentrations',
'NmolLev':'Number of elements for molecular concentrations',
'NCldLiq':'Number of elements for liquid cloud',
'NCldIce':'Number of elements for ice cloud',
'Nwind':'Number of elements for wind',
'U_algconfig':'Unit number for algorithm configuration data file',
'F_algconfig':'File path for algorithm configuration data',
'prof':'Atmospheric profile',
'Ifail':'Flag that test was failed',
'SxLiq':'Background error covariance for liquid cloud',
'SxIce':'Background error covariance for ice cloud',
'debug':'Flag for debugging mode',
'invCldCov_in':'Flag for using inverse covariance matrix in retrieval',
'liqCov_in':'covariance to apply to clw when clw < 0',
'iceCov_in':'covariance to apply to iwp when iwp < 0',
'maxcldbasebak_in':'max pressure allowed for cloud base',
'htol_in':'supersaturation tolerance',
'tmax_in':'maximum allowed temperature',
'tmin_in':'minimum allowed temperature',
'ctoplow_in':'minimum allowed liquid cloud top pressure',
'icetoplow_in':'minimum allowed ice cloud top pressure',
'deffLiqMin_in':'minimum allowed liquid cloud particle size',
'deffIceMin_in':'minimum allowed ice cloud particle size',
'deffLiqMax_in':'maximum allowed liquid cloud particle size',
'deffIceMax_in':'maximum allowed ice cloud particle size',
'thickmin_in':'minimum allowed cloud thickness',
'Pmin4SaturChk_in':'lowest pressure at which to check for supersaturation',
'kchanIn':'Channel on/off mask for input',
'MinNChan':'lowest number of channels allowed',
'RadInvld':'lowest radiometric measurement value allowed',
'ValidRad':'Flag for valid/invalid radiometric measurements',
'bndT':'structure with maximum and minimum bounds for temperature',
'bndTskin':'structure with maximum and minimum bounds for surface skin temperature',
'bndP':'structure with maximum and minimum bounds for surface pressure',
'bndH2O':'structure with maximum and minimum bounds for water vapor concentration',
'lowerVector':'lower bounds vector',
'upperVector':'upper bounds vector',
'U_bndconfig':'Unit number for physical bounds data',
'F_bndconfig':'File path for physical bounds data',
'ibit':'index of bit on which to operate',
'var':'Generic variable',
'bound':'structure with maximum and minimum bounds',
'fill':'Flag to fill out-of-bounds values with missing data flag',
'cap':'Flag reset values to the bounds if they are out of bounds',
'qcRetr':'quality control index',
'chiSq':'chi-square metric',
'rms':'RMS difference',
'ncfile':'path of file',
'pol':'Polarization',
'icov':'flag telling what covariance data are present',
'time':'Date/time',
'acceptRange':'range to accept data, when no valid data',
'forceAverage':'Flag to force using average of valid surrounding data',
'frqPolGridded':'Flag that data are on a regular frequency/polarization grid',
'xlat':'Latitude',
'rlat':'Latitude',
'rlat1':'Latitude of point 1',
'rlat2':'Latitude of point 2',
'lat1':'Latitude of point 1',
'lat2':'Latitude of point 2',
'lat':'Latitude',
'xlon':'Longitude',
'rlon':'Longitude',
'rlon1':'Longitude of point 1',
'rlon2':'Longitude of point 2',
'lon1':'Longitude of point 1',
'lon2':'Longitude of point 2',
'lon':'Longitude',
'lonIn':'Longitude at input',
'lonH':'Longitude at which to cut the sphere',
'sfcData':'Surface data',
'qflag':'Flag telling status of finding valid data',
'timeReq':'requested date/time',
'jdays':'Julian days list',
'regrFile':'path of regression file',
'pstd':'pressure grid',
'zone_thk':'Ln(lower-p/upper-p) of transition zone',
'qCutOffPres':'pressure level at bottom of transition zone',
'profGrid':'Atmospheric profile on grid',
'profFov':'Atmospheric profile at FOV',
'T2m':'2-m temperature',
'q2m':'2-m humidity',
'file':'file path',
'nSamples':'number of samples',
'nlpres':'pressure grid: Number of levels',
'nlwv':'Number of WV levels',
'presGrid':'pressure grid',
'tair':'shelter-height temperature',
'rh':'Relative humidity',
'tskin':'Surface skin temperature',
'elev':'Elevation of surface',
'clustStart':'Starting pixel index within Cluster',
'clustNmem':'Number of pixels within Cluster',
'elevAvg':'elevation averaged',
'invertGrid':'Flag for reversing the order of the grid',
'findex':'file ID index',
'missing_value':'Value representing missing data',
'valid_min':'Minimum valid value',
'valid_max':'Maximum valid value',
'scale':'Data compression scale factor',
'offset':'Data compression offset',
'iseed':'seed for random number generator',
'sdv':'Desired standard deviation of the data distribution',
'mean':'Desired mean of the data distribution',
'e':'measurement error covariance matrix',
'bcov':'Background error covariance matrix',
'ncols':'Number of columns in matrix',
'nrows':'Number of rows in matrix',
'ydif':'Radiometric measurements minus computed',
'xn1':'initial profile',
'np':'number of parameters',
'xn':'inverted profile',
'SxMwOut':'covariance matrix in EOF domain',
'cinv':'inverse of background error covariance matrix',
'gm':'Levenberg-Marquardt parameter',
'einv':'inverse of measurement error covariance matrix.',
'yges':'Radiometric data computed from state vector',
'xbak':'background state vector',
'rbak':'radiance background',
'wght':'weights',
'uprof':'TBD',
'urad':'TBD',
'regrcoef':'Regression coefficients',
'npg':'TBD',
'neof':'TBD',
'xout':'TBD',
'aa':'square matrix',
'IDOM':'Day of the month',
'IMM':'Index of month',
'IM':'Index of month',
'IY':'Index of year',
'IDAY':'Relative day count',
'DAY':'Character form for day of the week',
'yr':'year',
'mth':'month',
'jday':'day of a year',
'dismv':'distance to move',
'psimv':'angular distance to move, degrees',
'dirmv':'direction ro move, counted from South, degrees',
'dirmov':'direction ro move, counted from South, degrees',
's1':'Sine of latitude 1',
's2':'Sine of latitude 2',
'c1':'Cosine of latitude 1',
'c2':'Cosine of latitude 2',
'sth':'Sine of longitudes difference',
'cth':'Cosine of longitudes difference',
'azIn':'Azimuthal angle at input',
'rotation':'Rotation matrix',
'rotationInv':'Inverse rotation matrix',
'npts':'number of points',
'col':'grid column',
'row':'grid row',
'nx':'number of global grid points in x-direction',
'nx_loc':'number of global grid points in x-direction',
'ny':'number of global grid points in y-direction',
'ny_loc':'number of global grid points in y-direction',
'colGridOffset':'column grid offset',
'colGridOffset_loc':'column grid offset',
'rowGridOffset':'row grid offset',
'rowGridOffset_loc':'row grid offset',
'mapRes':'resolution of grid, for converting spherical/sinusoidal grid',
'mapRes_loc':'resolution of grid, for converting spherical/sinusoidal grid',
'Re':'Earth radius',
'Re_loc':'Earth radius',
'lat0':'latitude at origin of map projection',
'lat0_loc':'latitude at origin of map projection',
'lon0':'longitude at origin of map projection',
'lon0_loc':'longitude at origin of map projection',
'colPointOffset':'column point offset',
'rowPointOffset':'row point offset',
'vp':'vapor pressure',
'h2o':'water vapor amount',
'nref':'index for the pressure level below surface',
'surfalt':'surface altitude',
'hsfc':'surface moisture',
'zref':'array of altitudes at pressure levels',
'pw':'precipitable water',
'tvprof':'virtual temperature profile',
'Z0':'NWP surface elevation',
'Ps0':'NWP surface pressure',
'gElev':'local gravity',
'Ps':'height-corrected surface pressure',
'latFov':'Latitude at FOV',
'lonFov':'Longitude at FOV',
'elevFov':'Elevation of surface at FOV',
'profGrid4':'Atmospheric profile data from surrounding grid points',
'latGrid4':'Latitudes of surrounding grid points',
'lonGrid4':'Longitudes of surrounding grid points',
'elevGrid4':'Elevations of surfaceat the surrounding grid points',
'wt':'bi-linear interpolation weights for four grid points surrounding FOV location',
'itype':'integer flag to regulate profile input',
'psfcFov':'Surface pressure at FOV',
'ID':'Identifier index',
'Idarr':'Array of identifier indices',
'map':'List of indices to use in remapping data',
'maps':'Mapping to absorbing molecules',	   
'mapSize':'Map dimension',
'xFileSize':'number of constituents in NGF',
'fidIndex':'File identifier index',
'stateIndexEnabled':'Flag to enable/disable stateIndex',
'fid':'File identifier index list',
'molecString':'Charcter string that identifies a molecular species',
'MolOn':'List of string molecular IDs',
'REGRESon':'Flag to include regression mode in IR retrieval',
'PHYSon':'Flag to include physical mode in IR retrieval',
'MWon':'Flag to include microwave',
'iStrat':'Stratification level flag',
'flagDynCldMask':'Use dynamic cloud mask?',
'extFlgEmIRin':'Flag for using external IR emissivity data',
'genLinInvertIn':'Flag to generate output for linear inversion',
'ossScatRegrIrIn':'Flag for using predictors in scattering',
'Nprofs':'Number profiles',
'mwCld':'Interger flag to include clouds in MW (inactive)',
'iCellIn':'Index for horizontal cell size (resolution of processing)',
'icasc':'Index for cascade level (when in cascade mode)',
'iembkgflg':'Flag to use external emissivity background in MW',
'iextbkg':'Flag to use external atmosphere background in MW',
'kchanOut':'Channel on/off mask, for output',
'DynamicNoise':'Flag for using dynamic noise model',
'addNoiseIn':'Flag to add noise, in simulation',
'nRetrAttemptsIn':'maximum number of retrieval attempts, with different settings',
'spilloverNoiseIn':'Include antenna spillover factor in microwave noise computation',
'calibAmpIn':'Include calibration amplification factor in microwave noise computation',
'enableScatterIn':'Flag for including multiple scattering in calculations, for input',
'use2ndOrderPlanckIn':'flag to use MW Planck approximation from 2nd-order Taylor expansion',
'pobsIn':'Pressure at observer level',
'molOnRTin':'List of molecular species turned on for radiative transfer',
'nlfile':'File path from which to read the namelist',
'Alpha1slope':'Slope of factor to model linearization error',
'Alpha1int':'Intercept of factor to model linearization error',
'modchan':'Flag to reduce the total set of OSS channels',
'nElements':'Number of elements',
'memberList':'List of cluster members',
'startIndices':'Index into member lists for first member of each cluster (0-based)',
'ncid':'ID for ncdf file ',
'fname':'File name',
'varName':'Name of variable',
'ncStatus':'Error status',
'msg':'Text of message'
}

fncDesc={
#ir/core/
'IRBkgPrepModule':'Processing retrieval background data (a priori and error covariance)',
'IRbkgPrepInit':'Load and initialize data, and allocate memory',
'loadBkgTuning':'Load background tuning parameters from tuning data file.',
'loadBkgClimo':'Load background and covariance data from file for atmospheric and surface quantities',
'setPropertiesBkgTuning':'Set global variables from argument list, for background tuning parameters',
'validateExt':'Check external data structure against background data structure and retrieval switches.',
'validateEmis':'Check external emissivity against background parameters.',
'IRsetFOVbkg':'Check consistency between the selected and available classes, for atmosphere and surface.',
'IRgetBkgClim':'Get climatology information on background, covariance and transformation matrix for atmosphere and surface, for selected classes.',
'IRsetRetrVec':'Set the sizes and on/off status of components of retrieval vector using the values in corresponding input parameters and conditional on the retrievalFlags.',
'IRsetExtBkg':'Load external background data into global vector',
'IRsetEmisBkg':'Load external emissivity and reflectivity data into global vector.',
'IRcombBkg':'Load climatology background into the worskpace array. Background may be overwritten with external data.',
'IRtuneBkg':'Tune background (a priori and error covariance) data, overriding any prior settings.',
'IRtransBkg':'Transform covariance from physical space to retrieval space.',
'IRMapInvert':'Contains subroutines for transforming between retrieval vector space and geophysical vector space.',
'IRmap_retr2geo':'Convert state vector from retrieval to geophysical space.',
'map_regr2retr_geo':'For regression: convert state vector from retrieval to geophysical space.',
'set_IRMW_Invert':'Prepare for inversion.  Merge emissivity Jacobians into complete Jacobian matrix.  Convert radiance to the difference form.  Tune measurement/model error.  Exclude unused channels.',
#util/io
'ClusterFileIO':'Routines for loading cluster file dimensions, attributes and variables, thereby compartmentalizing the data input.',
'getDimCluster':'Reads and returns the dimensions and attributes for the variable data in cluster file',
'getClusterData':'Reads and returns all cluster information necessary for stage 2 retrieval.',
#ir/rtm/
'oss_ir_module_scat':'OSS Forward Model (IR).',
'oss_init_ir':'Initialize OSS, to prepare to run OSS for certain channel set.',
'GetOD':'Read the pre-computed look-up tables for the OSS radiative transfer model and do pre-processing of the data.',
'odthresh':'Compare optical depth of individual dry constituents to total optical depth and flag weakly absorbing molecules',
'cum_fix':'For variable molecules that are flagged as rejected, merge their absorption data with fixed gases',
'shrink_var':'Reduce initial set of variable molecules to their final set',
'ossdrv_ir':'Driver for the IR radiative transfer model. Computes both radiances and their Jacobians with respect to geophysical parameters.',
'vinterp':'Interpolate input data from a grid to a node wavenumber, assuming ascending ordering.',
'setpath_ir':'Computes items related to the viewing geometry.',
'fpath_ir':'Calculate the average temperature and molecular amounts and their derivatives with respect to level temperatures and mixing ratios, respectively, for all layers of given profile(s).',
'lpsum':'Computes average layer quantities (or integrated amount) using a linear dependence on P.',
'lpsum_log':'Computes average layer quantities (or integrated amount) using a log-x dependence on log-p.',
'lint':'Interpolation in linear pressure',
'lint_log':'Interpolation in log pressure',
'OSStran':'Computes the layer molecular optical depths based on absorption coefficient LUT.',
'settabindx':'Computes indices and coefficients for interpolation of optical prperties with respect to temperature.',
'OSSrad':'Compute radiances (in mw/m2/str/cm-1) and derivatives of radiances with respect to atmospheric and surface parameters',
'planck_int':'Compute Planck radiance and its derivative with respect to temperature, using linear interpolation with respect to wavenumber',
'planck_set':'Get Planck radiance and derivatives for each point in a profile.',
'planck':'Calculate Planck function and its derivative wrt temperature.',
'optInt':'Perform spectral interpolation to determine cloud optical properties at given wavenumber based on stored values at bounding hingepoints.',
'rlin':'For linear-In-Tau approach, compute the Planck radiance weight (hlf) of the far boundary of the layer, and its derivative (dhlf)',
'OSS_DESTROY_IR':'deallocate arrays',
'asolar_source_function':'Contains items needed to include the sun in OSS Forward Model calculations.',
'getSolar':'Read from file for obtaining solar source function.',
'InterpSolar':'Interpolate solar source data from input grid to output grid.',
#util/rtm/
'oss_addbl':'Contains items needed for the OSS scattering adding-doubling radiative transfer.',
'scattRT':'Wrapper to interface oss_module with ossScat.',
'OSSSCAT':'Driver for scattering adding-doubling radiative transfer.',
'SETCTL':'Set lowest and highest atmospheric layers for starting radiative transfer calculations',
'SURFCE':'Subroutine initializes the reflection matrix and emission vector for the lower atmosphere.',
'CLRLAY':'Calculate transmission and emission for a clear slab.',
'MSLAY':'Apply doubling tables for a cloudy layer. Compute forward and backward internal emission due to thermal and solar sources.',
'GENTAB':'Generate look-up tables of reflection, transmission matrices and source vectors by doubling calculations.',
'DI':'Calculate reflection, transmission and sources for an infinitesimal layer by using the Diamond Initialization scheme.',
'DOUBL':'Perform doubling calculations for a homogeneous scattering layer.',
'EMIS':'Perform doubling of the thermal source',
'SUNB':'Perform doubling of the solar source',
'ADDCLR':'Perform adding of a clear layer.',
'ADDMS':'General layer adding subroutine',
'MRGRAD':'Calculate the observed radiances by combining reflection and emission of the atmosphere below and above the observer level.',
'MLREF':'Calculates multiple reflection term by truncated series.',
'HOCOR':'Correction for missing high order terms in MLREF',
'VZERO':'VECTOR OPERATIONS: Set vector to zero',
'VCOPY':'VECTOR OPERATIONS: Copy vector A to vector B',
'sVADD':'VECTOR OPERATIONS: Add vectors A and B. Result is vector C',
'VSCAL':'VECTOR OPERATIONS: Multiply vector by scalar.',
'sVSUB':'VECTOR OPERATIONS: Subtract vector from vector.',
'MADDI':'MATRIX AND MATRIX/VECTOR OPERATIONS: Add the identity matrix to a square matrix.',
'MXM':'Product of two matrices',
'sMINV':'Invert a double precision matrix',
'MXMV':'Product second matrix by first matrix, where both are square.',
'DMXMV':'Product square matrix by diagonal matrix (stored as a vector). Result is matrix.',
'MXDMV':'Product diagonal matrix (stored as a vector) by a square matrix. Result is matrix.',
'MXVV':'Product vector (transposed) by matrix. Result is vector.',
'DMXVV':'Element-by-element product of two vectors (product of two diagonal matrices, where inputs and outputs are stored as vectors).',
'LEPOLY_OSS':'Computes normalized associated Legendre polynomial, defined in terms of associated Legendre polynomial',
'wdraddt':'Derivative of radiance with respect to temperature.  Duplicate of DBDT.',
'WNBRIT':'Equivalent blackbody temperature of radiance (inverse Planck function).',
'DBDT':'Derivative of radiance with respect to temperature.  Duplicate of wdraddt',
'WNMRAD':'Radiance of absorbing/emitting atmosphere with a blackbody surface background.',
'WNPLAN':'Planck function, with internal calculations in double precision.',
'QGAUSN':'Compute weights and abscissae for ordinary Gaussian quadrature on the interval (0,1)',
'ErrMsg':'Print out a warning or error message',
'D1MACH':'Set Double-precision machine constants',
'CloudModule':'Convert between cloud physical properties and optical properties.',
'initCloud':'Initialize conversion between cloud physical properties and optical properties, specifying which hydrometeors to treat and the type of profile model.',
'buildCldDataNames':'Prepare names of data needed from optical property tables by combining hydrometeor and optical property ID strings.',
'getCldDataNames':'Get names of data needed from optical property tables, from global memory.  This is to give access to information that allows top-level program to call loadCloudTab.',
'setCloudOptProfile':'Convert from cloud physical properties to optical properties, with input as a profile.',
'setCloudOptLayer':'Convert from cloud physical properties to optical properties, with input from a layer model.',
'destroyCloud':'Free-up memory.',
'CloudTab':'The module produces cloud properties from tables of gridded data.',
'cloudTabInit':'Initialize access to tabulated cloud data.',
'loadCloudTab':'Load tabulated cloud data.',
'handle_nc_err':'Handle errors',
'interpTypeCheck':'Check that the software can handle the interpolation type for which the data were stored.',
'stepUniform':'Compute the grid step size, expecting that spacing is uniform.',
'getCloudTab':'Provide cloud property data for all spectral points interpolated to the specified values of temperature and primary and secondary parameters of the particle size distribution model.',
'boundGrid':'Find the indices of a physical quantity grid that bound its given value.',
'interpolate':'Interpolate from grid, according the specified method.',
'cloudTabDestroy':'Deallocate memory',
#util/reference/
'constants':'Contains physical constants needed acrosss a number of applications',
'errorHalt':'Halt execution when an error occurs, while setting the process status to an integer value.',
#util/retr/
'LinInvert':'Tools for linear retrieval',
'initBuildLin':'Define linear retrieval state vector content in geophysical space, and make an index map from this content to the content of the full geo space',
'buildLinearCoef':'Build the coefficients for a linear MAP retrieval',
'linRetr':'Execute linear retrieval',
'destroyLinInvert':'Deallocate arrays',
'setXPtrR':'Set the retrieval vector structure based on input sizes of the components, with consistency checks.',
'ChkValid':'Subprograms related to checking and constraining the consistency of data with physical limits.',
'chkges':'Check and constraining the consistency of elements of a state vector with physical limits.',
'resetCloudCovs':'Reset covariance matrix to a prior state.',
'setPropertiesGuessLimits':'Set global variables from argument list, for physical limits.',
'loadGuessLimits':'Load physical limits from a file.',
'chkRad':'Test validity of radiometric data, to set switches and QC flags.',
'setPropertiesBounds':'Sets global variables from argument list, for vectors that contain the ID, lower and upper bounds of physical parameters.',
'loadBounds':'Loads vectors that contain the ID, lower and upper bounds of physical parameters via namelist.',
'queryUpperBound':'Returns upper bound upon request with an input string.',
'queryLowerBound':'Returns lower bound upon request with an input string.',
'checkProfile':'Check all the physical bounds for an individual profile',
'checkBoundsScalar':'Scalar interface for checkBoundsVector.',
'checkBoundsVector':'Check the bounds for an arbitrary vector of physical parameters, and signal if out-of-bound is detected.',
'retrQC':'Set an integer QC flag based on status of logical QC flag',
'getChiSq':'Compute normalized chi-square and RMS difference values.',
#util/sensor_model
'AccessSfcGrid':'Tools for extracting data from a file of gridded surface grid.',
'isLoadedSfcGrid':' Allow parent to know whether file is loaded, since can only do one at a time',
'loadSfcGrid':'Initialize access to the grid file by loading properties and creating conversion/interpolation maps.',
'setSfcLoc':'Obtain gridded data at or near a lat/lon location',
'iClosestDate':'For a given date, find the index of the database array giving the closest temporal match.',
'destroySfcGrid':'Free dynamic memory of global variables and close netCDF file',
'interpNWPtools':'Module to read NWP and cluster data, average NWP to cluster centers and produce vectical profiles.',
'getNWPdim':'Get NWP related dimensions from the input ncdf file',
'getNWPdata':'Get NWP data from the input ncdf file',
'setStateIndex':'Set state vector lengths and indices',
'computeH2oMixr':'Loop over samples for conversion from relative humidity to mixing ratio.',
'avgClusterProf':'Compute average over the constituents of a cluster.',
'checkCldliq':'QC for cloud liquid top and thickness.',
'h2oMixr':'Manipulate relative humidity and loop over levels for conversion from relative humidity to mixing ratio.',
'readDataAtt':'Read attributes from the input ncdf file.',
'gridProf':'Tools for vertical grid remapping of profile data',
'setGridProf':'Read coefficients for interpolation/extrapolation to output grid',
'regridProf':'Execute interpolation/extrapolation of a profile to output grid',
'closeGridProf':'Clean up.',
#util/math
'gauss':'Compute Gaussian distribution.',
'InvertModule':'Contains inversion subroutines, retrieving a vector of variables from a vector of measurements.',
'invrt2_cholesky':'Performs profile inversion by optimal estimation in configuration 2, using Cholesky decomposition.',
'invrt1_cholesky':'Performs profile inversion by optimal estimation in configuration 1, using Cholesky decomposition.',
'invrt1_LM_cholesky':'Performs profile inversion by optimal estimation in configuration 1, using Cholesky decomposition, with Levenberg-Marquardt',
'invrt1_nonDiagSy_cholesky':'Performs profile inversion by optimal estimation in configuration 1, using Cholesky decomposition, where measurement error covariance matrix is not assumed to be diagonal.',
'invrt1_LM_nonDiagSy_cholesky':'Performs profile inversion by optimal estimation in configuration 1, using Cholesky decomposition, with Levenberg-Marquardt, and measurement error covariance matrix is not assumed to be diagonal.',
'invrt2_GaussJordan':'Performs profile inversion by optimal estimation in configuration 2, using Gaus-Jordan method.',
'invrt1_GaussJordan':'Performs profile inversion by optimal estimation in configuration 1, using Gaus-Jordan method.',
'invrt1_GJ_factors':'Compute factors that can be used in inversion by optimal estimation in configuration 1, using Gaus-Jordan method.',
'invrtRegr':'Performs profile inversion by regression.',
'dminv':'Inverts a double precision matrix',
'dmxd':'Product of matrix by diagonal matrix (stored as a vector). Result is matrix.',
#util/math/lapack_subset/
#'dpotrf':'Computes Cholesky factorization of a real symmetric positive-definite matrix.',
#'dpotrs':'Solve a system of linear equations A*X = B with a symmetric positive-definite matrix A using the Cholesky factorization.',
#util/misc/
'date_module':'Tools for converting date information',
'JDAY':'Convert calendar date to Julian date.',
'NDAY':'Convert calendar date to relative day count.',
'GDATE':'Convert relative day count to calendar date.',
'julday2calday':'Converts Julian day and year to calendar date.',
'GeomSpheric':'Contains subroutines related to geometry on a sphere, including treatment of lat/lon coordinates, accurate at all latitudes.',
'gcdist':'Distance between two lat-lon points on a great circle.',
'mvltlnd':'Latitude/longitude of the point arrived at by starting at rlat1, rlon1 and moving a distance dismv in the direction dirmov.  This is an alternate interface for mvltln.',
'mvltln':'Latitude/longitude of the point arrived at by starting at rlat, rlon and moving an angular distance psimv in the direction dirmov',
'angintr':'Compute the interior angle of two points given in spherical coordinates.',
'angazim':'Compute the azimuth angle from one point to another point, in spherical coordinates.',
'azPolReverse':'Convert azimuth angle from South=0, positive counterclockwise to North=0, positive clockwise or vice versa',
'lonReverse':'Convert longitude convention',
'setRotation':'Construct rotation matrices.',
'rot2xy':'Completes rotation of lat/lon coordinates to a new geographic origin.',
'StateIndexModule':'Module to define the state vector index structure and associated operations',
'initLengths':'Initialize all the lengths of each individual parameter in the state vector to zero.',
'genIndices':'Generate indices with given vector length for each variable.',
'getVectorLength':'Return the length of state vector',
'getNMolfromProf':'Get the number of molecules from a state vector (or profile) structure.',
'getNMolfromMolID':'Get the number of molecules from a given molecule ID vector',
'getMolID':'Create a molecule ID vector from a state vector structure.',
'whereH2O':'Returns the index of H2O if found, otherwise -1.',
'searchID':'Searches for a certain ID in an array of IDs and returns the index of the ID in the ID array if found; Otherwise, returns -1.',
'compressMol':'Converts the molecule-related portion of a state vector size structure so that the active molecules are moved from the order specified in MolID to the front.',
'expandMol':'Converts the molecule-related portion of a state vector size structure so that the active molecules are moved from the front, in the order specified in MolID.',
'genMapFrom':'Generate state vector size and index structures listing molecules according to the content of a source file (default), optionally reduced according to user selections (if MolID is present).  Generate an index map for remapping a state vector, according to the size structures of the source and the output.',
'initFileID':'Keep list of IDs of all open netCDF files, for keeping track of the properties of each file.',
'printIndex':'Print state vector size and index structures',
'molecStringToIndex':'Convert a character string that identifies a molecule to the index where the molecule is stored in the standard convention',
'charToMolID':'Convert list of string molecule IDs to an integer vector of indices where molecules are stored in the standard convention',
'mapConvert':'Coordinate conversion utilities for sinusoidal grid and lat/lon',
'ij2ll_sinusoid':'Convert input column and row to lat/lon on sinusoidal grid. If result is off the Earth, returned values are MISSING_REAL',
'll2ij_sinusoid':'Convert input lat/lon to column and row on sinusoidal grid.',
'jlon2i_sinusoid':'Given row (j) and longitiude on sinsusoidal grid, convert to corresponding column (i) in the row.',
'iWrap_sinusoid':'Given row (j) and column (i) on sinsusoidal grid, check whether i is out of range and, if so, find the equivalent i in range, taking account of the periodicity of the i dimension of a sinusoidal grid.',
'defineGrid':'Define grid scale and size based on user inputs.  Scale and size are not independent, so user has options about which parameters to provide. It is intended that all optional arguments are present in the calling statement, but may not be present in the parent of the calling subroutine.',
'MetFunctions':'Meteorological functions.',
'svp':'Calculate saturation vapor pressure.',
'mrFromVp':'Calculates mixing ratio from vapor pressure and pressure.',
'mrFromRH':'Calculates mixing ratio (q) from relative humidity (RH), based on the definition RH=q/qsat, where sat indicates saturation.',
'mrFromRHe':'Calculates mixing ratio (q) from relative humidity (RH), based on the definition RH=e/esat, where e is vapor pressure and sat indicates saturation.',
'presToAlt':'Calculate altitude profile using hydrostatic equation.',
'precipWater':'Compute precipitable water.',
'adjSfcPresPoint':'Generate altitude profile.',
'adjSfcPresAlt':'Adjust NWP-derived surface pressure for local topography.',
'LvlInterp':'Contains subroutines related to interpolation over grid levels',
'lvl_int':'performs logarithmic interpolation of physical quantities within pressure layers',
#ir/io/
'IRReadStdInputs':'Consists of a file for reading IR input parameters/file names',
'IRreadStd':'Read IR input parameters/file names used in simulations and retrieval',
'IRReadStdInputs':'Load the primary IR-related control input parameters.  Control all of the IR-related hard-coded file unit numbers.  Set all file names.  Unit file names and numbers are public.',
#mw/io/
'ReadStdInputs':'Load the primary control input parameters.  Control all of the hard-coded file unit numbers.  Set all file names.  Unit file names and numbers are public.',
'readStd':'Load the primary control input parameters.',
#mw/core/
'MapInvert':'Contains subroutines for transforming between retrieval vector space and geophysical vector space.',
'map_retr2geo':'Convert state vector from retrieval to geophysical space.',
'map_geo2retr':'Convert state vector from geophysical to retrieval space.',
'mapK_geo2retr':'Convert Jacobians from geophysical to retrieval space.',
'set_MW_Invert':'Prepare for inversion.  Merge emissivity Jacobians into complete Jacobian matrix.  Convert radiance to the difference form.  Tune measurement/model error.  Exclude unused channels.',
}

rmHdr='!.*<.*f90.*>.*'
